ROAS: Return On Advertising Spend (ROAS) is a marketing metric that measures the efficacy of a digital advertising campaign. For every dollar that the company spends on its advertising campaign, it generates $X worth of revenue. Read more -> https://www.bigcommerce.com/ecommerce-answers/what-is-roas-calculating-return-on-ad-spend/
STREAMING: a type of data processing engine that is designed with infinite data sets in mind. Read more -> https://www.oreilly.com/ideas/the-world-beyond-batch-streaming-101
UNBOUDED DATA: infinite “streaming” data sets
BOUDED DATA: finite “batch” data sets
ATOMIC: an operation is atomic if it appears as if it occurred instannaeously from the point of view of other threads. The synchronized block is used to achieve atomicity in Java and Scala. It is achieved through a Monitor attached to a Thread.
IMPRESSION: An impression is a view. When your ad loads and displays in front of a user, that is one impression. What’s the point of impressions? Well, you can’t have clicks without impressions. Users need to see your ads before they can decide whether or not to click them.
STREAMING PERFORMANCE: A single thread can read or write data to Kafka at around 100MB/sec, which for small messages might be on the order of a million messages/sec. Read more -> https://www.oreilly.com/ideas/why-local-state-is-a-fundamental-primitive-in-stream-processing
AAID: Android Advertising ID
IDFA: (Apple) ID For Advertisers
MAID: Mobile Ad Identifiers. MOAD = MAID
FOLD LEFT: In scala, foldLeft method is not parallelizable. To be able to change the result type from A to B in function `def foldLeft[B](z: B)(f: (B, A) => B): B` forces to have to execute foldLeft sequentially from left to right.
FOLD: In scala, fold method is parallelizable. The function `def fold(z: A)(f: (A, A) => A): A` enables parallelize, but it restricts to always returning same type.
AGGREGATE: In scala, aggregate method is parallelizable and enables change returning type. It is a combination of fold and foldLeft method: `def aggregate[B](z: => B)(seqOp: (B, A) => B, comOp: (B, B) => B): B`. (1) seqOp function enables sequential-style folds in chunks which change result type; (2) comOp function enables reduce of these chunks results in parallel.

